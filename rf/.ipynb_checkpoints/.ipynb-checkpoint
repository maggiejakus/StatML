{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 360,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 361,
   "metadata": {},
   "outputs": [],
   "source": [
    "#read in files\n",
    "#already been split into training people and testing groups\n",
    "#made from impute2\n",
    "\n",
    "testing_SNPs = pd.read_csv('testing.txt', delimiter=' ', header = None)\n",
    "training_SNPs = pd.read_csv('training.txt', delimiter = ' ', header = None)\n",
    "#map22 = pd.read_csv('map22.txt', delimiter = '\\t', header = None)\n",
    "map22_2 = pd.read_csv('chr22.txt', delimiter = ' ', header = None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5000, 505)\n",
      "7993\n",
      "2486\n",
      "2488\n",
      "[   5    8   14 ... 7250 7251 7260]\n"
     ]
    }
   ],
   "source": [
    "#read in map\n",
    "#find how many SNPs in our training/testing SNPs (they're the same...) are also in our map\n",
    "\n",
    "print(training_SNPs.shape) #we only have 250 people in our training data\n",
    "#print(map22[:6][0]) #first col is physical position, second is recombination rate with the next SNP, \\\n",
    "#third is genetic map in cM\n",
    "\n",
    "training_SNPs_arr = training_SNPs[:][2].to_numpy()\n",
    "\n",
    "#map22_arr_pos = map22.loc[:][0].to_numpy()\n",
    "\n",
    "#this map has more data in it\n",
    "chr22_arr = map22_2.loc[:8000][1].to_numpy() #hard coding to make file smaller\n",
    "chr22_cM = map22_2.loc[:8000][2].to_numpy()\n",
    "\n",
    "#turns out there are a few duplicates in my chr22 map\n",
    "uniques = np.unique(chr22_arr)\n",
    "print(len(uniques))\n",
    "\n",
    "\n",
    "#find indices in training_SNPs_arr where we have a cM distance\n",
    "indices_in_SNPs = np.where(np.in1d(training_SNPs_arr,chr22_arr))\n",
    "indices_in_map = np.where(np.in1d(chr22_arr, training_SNPs_arr))\n",
    "\n",
    "print(len(indices_in_SNPs[0]))\n",
    "print(len(indices_in_map[0]))\n",
    "\n",
    "idx_map = indices_in_map[0]\n",
    "idx_SNP = indices_in_SNPs[0]\n",
    "\n",
    "print(idx_map)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-1.0\n",
      "[[ 1.60506070e+07  0.00000000e+00]\n",
      " [ 1.60508400e+07 -1.00000000e+00]\n",
      " [ 1.60508470e+07 -1.00000000e+00]\n",
      " [ 1.60512490e+07  0.00000000e+00]\n",
      " [ 1.60514770e+07  1.05258065e-03]\n",
      " [ 1.60520800e+07  5.93493548e-03]\n",
      " [ 1.60524630e+07 -1.00000000e+00]\n",
      " [ 1.60526840e+07  1.08277256e-02]\n",
      " [ 1.60528370e+07 -1.00000000e+00]\n",
      " [ 1.60529620e+07 -1.00000000e+00]\n",
      " [ 1.60529860e+07 -1.00000000e+00]\n",
      " [ 1.60531390e+07 -1.00000000e+00]\n",
      " [ 1.60532490e+07 -1.00000000e+00]\n",
      " [ 1.60532540e+07 -1.00000000e+00]\n",
      " [ 1.60534440e+07  1.70082028e-02]\n",
      " [ 1.60536590e+07  1.87560000e-02]\n",
      " [ 1.60537300e+07  1.93333232e-02]\n",
      " [ 1.60537910e+07  1.98292848e-02]\n",
      " [ 1.60538620e+07  2.04065037e-02]\n",
      " [ 1.60538630e+07 -1.00000000e+00]]\n"
     ]
    }
   ],
   "source": [
    "#make a 2 column matrix\n",
    "#first column = SNP position\n",
    "#second column = cM distance\n",
    "#if no cM distance, put -1 for now\n",
    "\n",
    "cM_map = np.zeros((SNPs,2))\n",
    "for SNP in range(SNPs):\n",
    "    #first column = SNP position\n",
    "    cM_map[SNP, 0] = training_SNPs_arr[SNP]\n",
    "    \n",
    "    #check if the SNP is found by indices_in_SNPs\n",
    "    if SNP in idx_SNP:\n",
    "        #ind = index for which indices_in_SNPs[index] == SNP\n",
    "        ind = np.where(idx_SNP == SNP)\n",
    "        #print(type(idx_map[ind][0]))\n",
    "        cM_map[SNP, 1] = chr22_cM[idx_map[ind][0]]\n",
    "    else:\n",
    "        cM_map[SNP, 1] = -1\n",
    "        \n",
    "#going to initialize this first value to a cM value of 0\n",
    "print(cM_map[0][1])\n",
    "cM_map[0][1] = 0\n",
    "print(cM_map[:20])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i 2 counter 3\n",
      "prev 0.0 next 0.0\n",
      "i 1 counter 2\n",
      "prev 0.0 next 0.0\n",
      "i 1 counter 2\n",
      "prev 0.00593493548387 next 0.0108277256461\n",
      "i 6 counter 7\n",
      "prev 0.0108277256461 next 0.017008202783299998\n",
      "i 5 counter 6\n",
      "prev 0.011710650951414285 next 0.017008202783299998\n",
      "i 4 counter 5\n",
      "prev 0.012593576256728571 next 0.017008202783299998\n",
      "i 3 counter 4\n",
      "prev 0.013476501562042857 next 0.017008202783299998\n",
      "i 2 counter 3\n",
      "prev 0.014359426867357142 next 0.017008202783299998\n",
      "i 1 counter 2\n",
      "prev 0.015242352172671428 next 0.017008202783299998\n",
      "i 4 counter 5\n",
      "prev 0.020406503664900003 next 0.026983546596900002\n",
      "[[1.60506070e+07 0.00000000e+00]\n",
      " [1.60508400e+07 0.00000000e+00]\n",
      " [1.60508470e+07 0.00000000e+00]\n",
      " [1.60512490e+07 0.00000000e+00]\n",
      " [1.60514770e+07 1.05258065e-03]\n",
      " [1.60520800e+07 5.93493548e-03]\n",
      " [1.60524630e+07 8.38133056e-03]\n",
      " [1.60526840e+07 1.08277256e-02]\n",
      " [1.60528370e+07 1.17106510e-02]\n",
      " [1.60529620e+07 1.25935763e-02]\n",
      " [1.60529860e+07 1.34765016e-02]\n",
      " [1.60531390e+07 1.43594269e-02]\n",
      " [1.60532490e+07 1.52423522e-02]\n",
      " [1.60532540e+07 1.61252775e-02]\n",
      " [1.60534440e+07 1.70082028e-02]\n",
      " [1.60536590e+07 1.87560000e-02]\n",
      " [1.60537300e+07 1.93333232e-02]\n",
      " [1.60537910e+07 1.98292848e-02]\n",
      " [1.60538620e+07 2.04065037e-02]\n",
      " [1.60538630e+07 2.17219123e-02]]\n"
     ]
    }
   ],
   "source": [
    "#need to infer missing cM values\n",
    "#going to just find average value (is this a valid assumption?)\n",
    "\n",
    "\n",
    "for SNP in range(20):\n",
    "    counter = 1\n",
    "    if cM_map[SNP][1] < 0:\n",
    "        i = 0\n",
    "        prev_known_SNP = cM_map[SNP-1][1]\n",
    "        while (cM_map[SNP + i][1] < 0):\n",
    "            counter +=1 \n",
    "            i += 1\n",
    "        next_known_SNP = cM_map[SNP + i][1]\n",
    "        print(\"i\", i, \"counter\", counter)\n",
    "        print(\"prev\", prev_known_SNP, \"next\", next_known_SNP)\n",
    "        cM_map[SNP][1] = (next_known_SNP - prev_known_SNP)/counter + prev_known_SNP\n",
    "        \n",
    "print(cM_map[:20])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "people 253\n"
     ]
    }
   ],
   "source": [
    "#convert testing file into 3 part prob dist file\n",
    "#for each SNP, each person, who is 100% AA, AB, or BB, which is written as 00, 01, or 11, gets \n",
    "#turned into one number for AA, one number for AB, one number for BB (so 1, 0,0 as AA, 0, 1, 0 as\n",
    "#AB, and 0,0,1 for BB)\n",
    "\n",
    "\n",
    "SNPs = int(testing_SNPs.shape[0])\n",
    "people = int((testing_SNPs.shape[1]-5) / 2.0)\n",
    "\n",
    "testing_dist = np.zeros((SNPs, people * 3))\n",
    "maj_homozygous_test = np.zeros((SNPs, people))\n",
    "heterozygous_test = np.zeros((SNPs, people))\n",
    "min_homozygous_test = np.zeros((SNPs, people))\n",
    "\n",
    "#need to come back to this...\n",
    "for SNP in range(SNPs):\n",
    "    for person in range(people):\n",
    "        if testing_SNPs.loc[SNP, 5 + person*2] == 0 & testing_SNPs.loc[SNP, 6 + person*2] == 0:\n",
    "            testing_dist[SNP, 3*person] = 1\n",
    "            testing_dist[SNP, 3*person + 1] = 0\n",
    "            testing_dist[SNP, 3*person + 2] = 0\n",
    "            maj_homozygous_test[SNP, person] = 1\n",
    "        elif testing_SNPs.loc[SNP, 5 + person*2] == 1 & testing_SNPs.loc[SNP, 6 + person*2] == 0:\n",
    "            testing_dist[SNP, 3*person] = 0\n",
    "            testing_dist[SNP, 3*person + 1] = 1\n",
    "            testing_dist[SNP, 3*person + 2] = 0\n",
    "            heterozygous_test[SNP, person] = 1\n",
    "        elif testing_SNPs.loc[SNP, 5 + person*2] == 0 & testing_SNPs.loc[SNP, 6 + person*2] == 1:\n",
    "            testing_dist[SNP, 3*person] = 0\n",
    "            testing_dist[SNP, 3*person + 1] = 1\n",
    "            testing_dist[SNP, 3*person + 2] = 0\n",
    "            heterozygous_test[SNP, person] = 1\n",
    "        elif testing_SNPs.loc[SNP, 5 + person*2] == 1 & testing_SNPs.loc[SNP, 6 + person*2] == 1:\n",
    "            testing_dist[SNP, 3*person] = 0\n",
    "            testing_dist[SNP, 3*person + 1] = 0\n",
    "            testing_dist[SNP, 3*person + 2] = 1\n",
    "            min_homozygous_test[SNP, person] = 1\n",
    "            \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5000, 505)\n"
     ]
    }
   ],
   "source": [
    "print(training_SNPs.shape)\n",
    "training_SNPs = training_SNPs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "#convert training file into 3 part prob dist file\n",
    "#for each SNP, each person, who is 100% AA, AB, or BB, which is written as 00, 01, or 11, gets \n",
    "#turned into one number for AA, one number for AB, one number for BB (so 1, 0,0 as AA, 0, 1, 0 as\n",
    "#AB, and 0,0,1 for BB)\n",
    "\n",
    "SNPs = int(training_SNPs.shape[0])\n",
    "people_training = int((training_SNPs.shape[1]-5) / 2.0)\n",
    "\n",
    "training_dist = np.zeros((SNPs, people_training * 3))\n",
    "maj_homozygous_train = np.zeros((SNPs, people_training))\n",
    "heterozygous_train = np.zeros((SNPs, people_training))\n",
    "min_homozygous_train = np.zeros((SNPs, people_training))\n",
    "\n",
    "#need to come back to this...\n",
    "for SNP in range(SNPs):\n",
    "    for person in range(people_training):\n",
    "        if training_SNPs.loc[SNP, 5 + person*2] == 0 & training_SNPs.loc[SNP, 6 + person*2] == 0:\n",
    "            training_dist[SNP, 3*person] = 1\n",
    "            training_dist[SNP, 3*person + 1] = 0\n",
    "            training_dist[SNP, 3*person + 2] = 0\n",
    "            maj_homozygous_train[SNP, person] = 1\n",
    "        elif training_SNPs.loc[SNP, 5 + person*2] == 1 & training_SNPs.loc[SNP, 6 + person*2] == 0:\n",
    "            training_dist[SNP, 3*person] = 0\n",
    "            training_dist[SNP, 3*person + 1] = 1\n",
    "            training_dist[SNP, 3*person + 2] = 0\n",
    "            heterozygous_train[SNP, person] = 1\n",
    "        elif training_SNPs.loc[SNP, 5 + person*2] == 0 & training_SNPs.loc[SNP, 6 + person*2] == 1:\n",
    "            training_dist[SNP, 3*person] = 0\n",
    "            training_dist[SNP, 3*person + 1] = 1\n",
    "            training_dist[SNP, 3*person + 2] = 0\n",
    "            heterozygous_train[SNP, person] = 1\n",
    "        elif training_SNPs.loc[SNP, 5 + person*2] == 1 & training_SNPs.loc[SNP, 6 + person*2] == 1:\n",
    "            training_dist[SNP, 3*person] = 0\n",
    "            training_dist[SNP, 3*person + 1] = 0\n",
    "            training_dist[SNP, 3*person + 2] = 1\n",
    "            min_homozygous_train[SNP, person] = 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight='balanced',\n",
       "                       criterion='gini', max_depth=4, max_features='auto',\n",
       "                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "                       min_impurity_split=None, min_samples_leaf=1,\n",
       "                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                       n_estimators=200, n_jobs=None, oob_score=False,\n",
       "                       random_state=None, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Transpose the matrices so they are people # rows and SNP # columns\n",
    "\n",
    "maj_homozygous_train.transpose()\n",
    "heterozygous_train.transpose()\n",
    "min_homozygous_train.transpose()\n",
    "\n",
    "#generate training data + labels for very first SNP\n",
    "idx_snp = 100\n",
    "offset = 20\n",
    "\n",
    "label_maj_homo = maj_homozygous_train[:, idx_snp]\n",
    "training_maj_homo = np.hstack((maj_homozygous_train[:, (idx_snp - 20):idx_snp], maj_homozygous_train[:, (idx_snp + 1):(idx_snp + 1 + offset)]))\n",
    "\n",
    "snp100 = RandomForestClassifier(n_estimators = 200, max_depth=4, class_weight = \"balanced\")\n",
    "snp100.fit(training_maj_homo, label_maj_homo)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.784\n",
      "predicted 823.0\n",
      "actual values 601.0\n"
     ]
    }
   ],
   "source": [
    "maj_homozygous_test.transpose()\n",
    "heterozygous_test.transpose()\n",
    "min_homozygous_test.transpose()\n",
    "\n",
    "label_maj_homo_test = maj_homozygous_test[:, idx_snp]\n",
    "testing_maj_homo = np.hstack((maj_homozygous_test[:, (idx_snp - 20):idx_snp], maj_homozygous_train[:, (idx_snp + 1):(idx_snp + 1 + offset)]))\n",
    "predict_label_maj_100 = snp100.predict(testing_maj_homo)\n",
    "\n",
    "print(np.sum(predict_label_maj_100 == label_maj_homo_test)/len(label_maj_homo_test))\n",
    "print(\"predicted\", np.sum(predict_label_maj_100))\n",
    "print(\"actual values\", np.sum(label_maj_homo_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n",
      "(5000, 253)\n"
     ]
    }
   ],
   "source": [
    "print(type(min_homozygous))\n",
    "print(min_homozygous.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "250\n",
      "(5000, 253)\n"
     ]
    }
   ],
   "source": [
    "#calculate indices for imputing\n",
    "'''\n",
    "thin_var = 0.5\n",
    "np.random.seed(0)\n",
    "\n",
    "idx_imputing = np.random.choice(int(len(maj_homozygous)), int(len(maj_homozygous) * thin_var), replace = False)\n",
    "sorted_idx = np.sort(idx_imputing)\n",
    "\n",
    "print(people)\n",
    "print(maj_homozygous.shape)'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5000\n"
     ]
    }
   ],
   "source": [
    "#actually remove indices of interest\n",
    "\n",
    "maj_homoz_toImpute = np.zeros((SNPs, people))\n",
    "hetero_toImpute = np.zeros((SNPs, people))\n",
    "min_homoz_toImpute = np.zeros((SNPs, people))\n",
    "\n",
    "#not sure if there's any point to \n",
    "maj_homoz_labels = np.zeros((int(len(maj_homozygous) * thin_var), 2))\n",
    "\n",
    "for SNP in range(SNPs):\n",
    "    if SNP in sorted_idx:\n",
    "        maj_homoz_toImpute[SNP] = maj_homozygous[SNP]\n",
    "    else:\n",
    "        maj_homoz_toImpute[SNP] = 2 #2 would mean it's to be imputed\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create \"labels\" vector for training\n",
    "#starting with major homozygous"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "#the RF model will produce the \"labels\" vector (testing)\n",
    "#starting with major homozygous \n",
    "#need to create the data matrix\n",
    "\n",
    "testing_data = np.zeros((int(len(maj_homozygous) * thin_var) * people , 20))\n",
    "counter = 1\n",
    "\n",
    "for SNP in range(SNPs):\n",
    "    if SNP in sorted_idx:\n",
    "        #do nothing\n",
    "    else:\n",
    "        if SNP < 10 or SNP > (SNPs - 11): \n",
    "        else:\n",
    "            for person in people:\n",
    "                for i in range(10):\n",
    "                    testing_data[person*counter, i] = \n",
    "\n",
    "\n",
    "#for SNP in range(int(len(maj_homozygous) * thin_var)): #2500\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2500\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
